---

#
# Check
#

- name: Install necessary packages
  apt: name="{{ packages }}" state=latest
  vars:
    packages:
      - libbz2-dev
      - libcrypto++-dev
      - libcurl4-openssl-dev
      - libfcgi-dev
      - libfreetype6-dev
      - libjpeg-dev
      - libmcrypt-dev
      - libmemcached-dev
      - libpng-dev
      - libpspell-dev
      - libreadline-dev
      - libssl-dev
      - libtidy-dev
      - libxml2-dev
      - autoconf
      - libzip-dev

- name: Check if we've already downloaded PHP
  stat: path=/usr/local/src/{{ php7_version }}.tar.xz
  register: php7_file_check

- name: Check if we've already extracted PHP
  stat: path=/usr/local/src/{{ php7_version }}
  register: php7_extract_check

#
# Run
#

#- name: Download {{ php7_version }}
#  get_url:
#    url: "{{ php7_download_url }}"
#    dest: /usr/local/src/{{ php7_version }}.tar.xz
#  when: php7_file_check.stat.exists == false

- name: Copy php {{ php7_version }}
  copy: src={{ deployment_resource_dir }}/php-{{ php7_version }}.tar.gz dest=/usr/local/src/php-{{ php7_version }}.tar.xz
  when: php7_file_check.stat.exists == false

- name: Remove extracted PHP if it exists
  file:
    path: /usr/local/src/php-{{ php7_version }}
    state: absent
  when: php7_extract_check.stat.exists == true

- name: Extract PHP
  unarchive:
    src: /usr/local/src/php-{{ php7_version }}.tar.xz
    dest: /usr/local/src
    creates: /usr/local/src/php-{{ php7_version }}
    copy: no
    owner: root
    group: root

- name: Create the PHP modules directory
  file: path={{ php7_extension_dir }} state=directory

- name: Configure
  shell: EXTENSION_DIR={{ php7_extension_dir }} ./configure --prefix={{ php7_install_prefix }} {{ php7_custom_modules }}
  args:
    chdir: /usr/local/src/php-{{ php7_version }}

- name: "make (WARNING: THIS WILL TAKE A LONG TIME)"
  command: chdir=/usr/local/src/php-{{ php7_version }} make

- name: make install
  command: chdir=/usr/local/src/php-{{ php7_version }} make install

- name: Set up log dir permissions (any existing ones too)
  file: path=/var/log/php7 group=www-data mode="g+w" recurse=yes state=directory

# THIS MUST HAPPEN BEFORE PECL SET UP
- name: Copy our production php.ini
  template: src=files/php.ini.j2 dest={{ php7_ini_path }} force=yes

#
# PECL MODULES
#

- name: Prepare PECL default extension directory location
  command: "{{ php7_install_prefix }}/bin/pecl config-set ext_dir {{ php7_extension_dir }}"

- name: Prepare PECL default php ini location
  command: "{{ php7_install_prefix }}/bin/pecl config-set php_ini {{ php7_ini_path }}"

#- name: PEAR Channel Update pre-module install
#  command: "{{ php7_install_prefix }}/bin/pear channel-update pear.php.net"

- name: PECL Channel Update pre-module install
  command: "{{ php7_install_prefix }}/bin/pecl channel-update pecl.php.net"

- name: Install inotify
  shell: "yes '' | {{ php7_install_prefix }}/bin/pecl install --force {{ php7_pecl_inotify_version }}"

- name: Install memcached
  shell: "yes '' | {{ php7_install_prefix }}/bin/pecl install --force {{ php7_pecl_memcached_version }}"

- name: Install msgpack
  shell: "yes '' | {{ php7_install_prefix }}/bin/pecl install --force {{ php7_pecl_msgpack_version }}"

- name: Add the opcache extension to php.ini
  lineinfile: dest={{ php7_ini_path }} line="zend_extension=opcache.so" insertafter=EOF

- name: Add the inotify extension to php.ini
  lineinfile: dest={{ php7_ini_path }} line="extension=inotify.so" insertafter=EOF

- name: Add the memcached extension to php.ini
  lineinfile: dest={{ php7_ini_path }} line="extension=memcached.so" insertafter=EOF

- name: Add the msgpack extension to php.ini
  lineinfile: dest={{ php7_ini_path }} line="extension=msgpack.so" insertafter=EOF

