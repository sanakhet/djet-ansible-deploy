
# Configuration File - Nginx Server Configs
# http://nginx.org/en/docs/dirindex.html
# Based on various places on the internet, but most recently this:
#   https://github.com/h5bp/server-configs-nginx

# Run as a unique, less privileged user for security reasons.
user nobody www-data;

# Sets the worker threads to the number of CPU cores available in the system for best performance.
# Should be > the number of CPU cores.
# Maximum number of connections = worker_processes * worker_connections
worker_processes auto;

# Maximum number of open files per worker process.
# Should be > worker_connections.
worker_rlimit_nofile 100000;

events {
  # If you need more connections than this, you start optimizing your OS.
  # That's probably the point at which you hire people who are smarter than you as this is *a lot* of requests.
  # Should be < worker_rlimit_nofile.
  worker_connections 66536;

  # Cause worker processes to accept all new connections at once rather than queuing
  # Note, it's unclear if this helps much under load, but in theory with extra caching it should.
  multi_accept on;
}

# Log errors and warnings to this file
# This is only used when you don't override it on a server{} level
# Sample override for specific site with debugging enabled:
#   error_log /var/log/nginx/site-error.log debug;
error_log  /var/log/nginx/error.log warn;

# The file storing the process ID of the main process
pid        /var/run/nginx.pid;

http {
    # Hide nginx version information.
    server_tokens off;
    
    # Specify MIME types for files.
    include       mime.types;
    default_type  application/octet-stream;
    
    # Update charset_types to match updated mime.types.
    # text/html is always included by charset module.
    charset_types text/css text/plain text/vnd.wap.wml application/javascript application/json application/rss+xml application/xml;
    
    # Include $http_x_forwarded_for within default format used in log files
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    # Log access to this file
    # This is only used when you don't override it on a server{} level
    access_log /var/log/nginx/access.log main;
    
    # By default, ignore not found messages in the logs
    log_not_found off;
    
    # Switch off ability to show port number on redirect
    port_in_redirect off;
    
    # How long to allow each connection to stay idle.
    # Longer values are better for each individual client, particularly for SSL,
    # but means that worker connections are tied up longer.
    keepalive_timeout 5s;
    fastcgi_read_timeout 5s;
    
    # If the time between two successive reads from a client exceeds this value,
    # then cut off the connection. Default is 60s.
    # NOTE: Consider lowering this?
    send_timeout 10s;

    # When clients don't send their request body or headers fast enough, cut them off.
    client_body_timeout 10s;
    client_header_timeout 10s;
    
    # allow the server to close connection on non responding client, this will free up memory
    reset_timedout_connection on;
    
    # Speed up file transfers by using sendfile() to copy directly
    # between descriptors rather than using read()/write().
    # For performance reasons, on FreeBSD systems w/ ZFS
    # this option should be disabled as ZFS's ARC caches
    # frequently used files in RAM by default.
    sendfile        on;
    
    # Don't send out partial frames; this increases throughput
    # since TCP frames are filled up before being sent out.
    tcp_nopush      on;
    
    # Max size before temporary files are used to buffer client request bodies.
    # Usually "8k|16k", 8k for 32bit systems, 16k for 64bit systems
    client_body_buffer_size      128k;
    
    # Max size allowed for a client request body specified in the "Content-Length" request header.
    client_max_body_size         64m;
    
    # Max size for request headers, usually long requests are due to long cookies, or a WAP client. 
    client_header_buffer_size    4k;
    
    # Max number and size of buffers used for reading large client header reuqests.
    # Default is "4 8k"
    large_client_header_buffers  8 64k;

    # Configures a cache that stores open file descriptors, sizes and modification times, info on directories,
    # file lookup errors like not found or permission checks.
    open_file_cache max=1024 inactive=10s;
    
    # Determines how long the open file cache entires are validated.
    open_file_cache_valid 120s;
    
    # Enable gzip compression.
    gzip on;
    
    # Compression memory buffers.
    # Interwebs are all over the place with info on this... May update info
    # later on when I have something useful to contribute.
    # For now, 8 buffers of 64K max size.
    gzip_buffers 8 64K;
    
    # Disable for specific User-Agents.
    # The "msie6" mask is a special rule for old crap. Probably unnecessary though.
    gzip_disable "msie6";
    
    # Compression level (1-9).
    # 5 is often a good compromise between size and CPU usage, offering about
    # 75% reduction for most ASCII files (almost identical to level 9).
    # Tweak this as required.
    gzip_comp_level    5;
    
    # Don't compress anything that's already small and unlikely to shrink much
    # if at all (the default is 20 bytes, which is bad as that usually leads to
    # larger files after gzipping).
    gzip_min_length    4096;
    
    # Compress data even for clients that are connecting to us via proxies,
    # identified by the "Via" header (required for CloudFront).
    gzip_proxied       any;
    
    # Tell proxies to cache both the gzipped and regular version of a resource
    # whenever the client's Accept-Encoding capabilities header varies;
    # Avoids the issue where a non-gzip capable client (which is extremely rare
    # today) would display gibberish if their proxy gave them the gzipped version.
    gzip_vary          on;
    
    # Compress all output labeled with one of the following MIME-types.
    gzip_types
        application/atom+xml
        application/javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rss+xml
        application/vnd.geo+json
        application/vnd.ms-fontobject
        application/x-font-ttf
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/xml
        font/opentype
        image/bmp
        image/svg+xml
        image/x-icon
        text/cache-manifest
        text/css
        text/plain
        text/vcard
        text/vnd.rim.location.xloc
        text/vtt
        text/x-component
        text/x-cross-domain-policy;
    # text/html is always compressed by gzip module
    
    # This should be turned on if you are going to have pre-compressed copies (.gz) of
    # static files available. If not it should be left off as it will cause extra I/O
    # for the check. It is best if you enable this in a location{} block for
    # a specific directory, or on an individual server{} level.
    # gzip_static on;
    
    # Set up some default SSL configuration options
    ssl_protocols TLSv1.3 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
    # For ssl_protocols TLSv1.1 TLSv1.2;
    #ssl_ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:!AES256-GCM-SHA256:!AES256-GCM-SHA128:!aNULL:!MD5;
    # Notes for ssl_ecdh_curve:
    # - https://community.letsencrypt.org/t/how-to-get-an-a-rating-on-qualys-ssl-labs-with-nginx-without-breaking-loads-of-browsers/4582/32
    # - https://www.amazon.com/gp/product/1907117040/ (pg. 485)
    ssl_ecdh_curve secp384r1;
    ssl_session_cache shared:SSL:5m;
    ssl_session_timeout 24h;
    ssl_session_tickets off;
    #ssl_dhparam /etc/nginx/dhparam.pem; # no need to use this in dev
    
    # We cannot enable ssl_stapling as a general rule UNTIL all ssl_certificate directive files 
    # contain the intermediate certificates.
    # Also worth noting, if we ever change our ssl_certificate to not include the intermediate and CA certs,
    # we will need to ensure that we generate the fullchain.pem and reference it for each server block directly.
    #ssl_stapling on;
    #ssl_stapling_verify on;
    #ssl_trusted_certificate /path/to/fullchain.pem;
    # But we can add in a resolver which OCSP stapling will use in child server configs. We'll use Google's DNS for now.
    resolver 8.8.8.8 8.8.4.4 ipv6=off valid=300s;
    resolver_timeout 5s;
    
    # Reducing the SSL buffer size
    # This option sets the size of the buffer used for sending data via HTTPS. By default it's set to 16k so that it can
    # handle larger responses we can probably shrink this since most of our requests are ads that should be smaller.
    ssl_buffer_size 8k;
    
    # Add security headers
    # Consider enabling - disables mime type sniffing for script/css requests. Side effects in ad serving?? not sure
    # https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
    #add_header  X-Content-Type-Options nosniff;
    # Consider enabling - prevents detectable reflected XSS attacks. Side effects in ad serving?? not sure
    # https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection
    #add_header  X-XSS-Protection "1; mode=block";
    # DO NOT ENABLE THE FOLLOWING TWO HEADERS
    # Strict-Transport-Security = force ssl upgrade, which we don't want to do in seattle atm
    #add_header  Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    # SAMEORIGIN = require iframes to have the same origin, which breaks adserving horribly since its never the case
    #add_header  X-Frame-Options SAMEORIGIN;
    
    # Include your site configurations here, using one line per configuration. I would
    # recommend avoiding using a wildcard include, so your implementation is more
    # explicit. You tell the configuration what it should do.
    #include sites/site.conf;
}
